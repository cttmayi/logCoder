["lock_info", "acquire lock=%d, flags=%x, tag=\"%s\", name=%s, ws=%s, uid=%d, pid=%d", "锁获取信息", {"lock_id": "锁ID", "flags": "标志位", "tag": "标签", "name": "名称", "ws": "工作源", "uid": "用户ID", "pid": "进程ID"}]
["ready_status", "ready=%b,policy=%d,wakefulness=%d,wksummary=%x,uasummary=%x,bootcompleted=%b,boostinprogress=%b,waitmodeenable=%b,mode=%b,manual=%d,auto=%d,adj=%fuserId=%d", "准备状态信息", {"ready": "是否准备好", "policy": "策略", "wakefulness": "唤醒状态", "wksummary": "唤醒摘要", "uasummary": "用户活动摘要", "bootcompleted": "引导完成", "boostinprogress": "是否正在加速", "waitmodeenable": "是否启用等待模式", "mode": "模式", "manual": "手动值", "auto": "自动值", "adj": "调整值", "userId": "用户ID"}]
["release_lock_info", "release:lock=%d, flg=%x, tag=\"%s\", name=%s\", ws=%s, uid=%d, pid=%d", "锁释放信息", {"lock_id": "锁ID", "flags": "标志位", "tag": "标签", "name": "名称", "ws": "工作源", "uid": "用户ID", "pid": "进程ID"}]
["update_clipping", "updateClipping isOverlap:%b, getTopPadding=%f, Translation=%f", "更新裁剪信息", {"isOverlap": "是否重叠", "getTopPadding": "顶部填充", "Translation": "平移量"}]
["get_running_app_processes", "getRunningAppProcesses: caller %d does not hold REAL_GET_TASKS; limiting output", "获取运行应用进程信息", {"caller": "调用者ID"}]
["set_system_ui_visibility", "setSystemUiVisibility vis=%x mask=%x oldVal=%x newVal=%x diff=%x fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)", "系统UI可见性设置", {"vis": "可见性值", "mask": "掩码", "oldVal": "旧值", "newVal": "新值", "diff": "差异", "fullscreenStackVis": "全屏堆栈可见性", "dockedStackVis": "停靠堆栈可见性", "fullscreenStackBounds_x1": "全屏堆栈边界X1", "fullscreenStackBounds_y1": "全屏堆栈边界Y1", "fullscreenStackBounds_x2": "全屏堆栈边界X2", "fullscreenStackBounds_y2": "全屏堆栈边界Y2", "dockedStackBounds_x1": "停靠堆栈边界X1", "dockedStackBounds_y1": "停靠堆栈边界Y1", "dockedStackBounds_x2": "停靠堆栈边界X2", "dockedStackBounds_y2": "停靠堆栈边界Y2"}]
["user_activity", "userActivityNoUpdateLocked: eventTime=%d, event=%d, flags=%x, uid=%d", "用户活动信息", {"eventTime": "事件时间", "event": "事件类型", "flags": "标志位", "uid": "用户ID"}]
["animating_brightness", "Animating brightness: target=%d, rate=%d", "动画亮度调整", {"target": "目标亮度", "rate": "变化速率"}]
["cancel_notification", "cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d", "取消通知信息", {"pid": "进程ID", "uid": "用户ID", "tag": "标签", "pkg": "包名", "id": "通知ID"}]
["surface_destroy_info", "Destroying surface Surface(name=%s) called by %s", "Surface Destroy Information", {"surface_name": "name of the surface being destroyed", "caller_info": "information about the caller"}]
["orientation_change", "orientation change is complete, call stopFreezingDisplayLocked", "Orientation Change Completion", {}]
["key_event_interception", "interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%x down %b canceled %b", "Key Event Interception", {"keycode": "key code of the intercepted key", "interactive": "whether the device is in interactive mode", "keyguard_active": "whether the keyguard is active", "policy_flags": "flags related to the key event policy", "down_event": "whether it's a key down event", "canceled_event": "whether the event was canceled"}]
["notification_visibility", "onNotificationVisibilityChanged called", "Notification Visibility Change", {}]
["cancel_notification", "cancelNotification,index:%d", "Cancel Notification", {"index": "index of the notification to cancel"}]
["get_tasks_restriction", "getTasks: caller %d does not hold REAL_GET_TASKS; limiting output", "Get Tasks Restriction", {"caller_uid": "UID of the caller"}]
["app_window_token_info", "printFreezingDisplayLogsopening app wtoken = AppWindowToken{%s token=Token{%s ActivityRecord{%s u%d %s/%s t%d}}}, allDrawn= %b, startingDisplayed =  %b, startingMoved =  %b, isRelaunching =  %b", "应用窗口信息", {"wtoken": "窗口令牌", "token": "活动记录令牌", "activity_record": "活动记录", "user_id": "用户ID", "package_name": "包名", "activity_class": "活动类名", "task_id": "任务ID", "all_drawn": "是否全部绘制", "starting_displayed": "启动时是否显示", "starting_moved": "启动时是否移动", "is_relaunching": "是否重新启动"}]
["neighboring_cell_info", "getNeighboringCellInfo calling app is %s", "邻近小区信息请求", {"calling_app": "调用应用"}]
["touch_event", "onTouchEvent::%d, x=%f, y=%f", "触摸事件", {"event_type": "事件类型", "x_coordinate": "X坐标", "y_coordinate": "Y坐标"}]
["alarm_info", "sending alarm Alarm{%s type %d when %d PendingIntent{%s}},repeatInterval = %d,listenerTag =%s", "报警信息", {"alarm_id": "报警ID", "alarm_type": "报警类型", "alarm_time": "报警时间", "pending_intent": "待处理意图", "repeat_interval": "重复间隔", "listener_tag": "监听器标签"}]
["service_start_failure", "Unable to start service Intent { act=%s cmp=%s/%s } U=%d: not found", "服务启动失败", {"action": "动作", "package_name": "包名", "service_class": "服务类名", "user_id": "用户ID"}]
["app_window_skip", "Skipping AppWindowToken{%s token=Token{%s %s}} -- going to hide", "应用窗口跳过", {"p1": "AppWindowToken ID", "p2": "Token ID", "p3": "ActivityRecord Info"}]
["visibility_status", "visible is %s", "可见性状态", {"p1": "系统属性"}]
["visibility_value", "mVisiblity.getValue is %b", "可见性值", {"p1": "布尔值"}]
["update_dimmed_activated", "updateDimmedActivatedHideSensitive overlap:%b", "更新遮罩状态", {"p1": "重叠状态"}]
["cancel_autohide", "cancelAutohide", "取消自动隐藏", {}]
["notify_ui_visibility_changed", "notifyUiVisibilityChanged:vis=%x, SystemUiVisibility=%x", "通知UI可见性变化", {"p1": "可见性标志", "p2": "系统UI可见性标志"}]
["start_animation", "startAnimation %s", "开始动画", {"p1": "阶段"}]
["remove_pending_intent", "remove(PendingIntent{%s: PendingIntentRecord{%s %s broadcastIntent}}) changed bounds; rebatching", "移除挂起意图", {"p1": "PendingIntent ID", "p2": "PendingIntentRecord ID", "p3": "广播组件"}]
["rotation_for_orientation", "rotationForOrientationLw(orient=%d, last=%d); user=%d %s", "旋转方向", {"p1": "当前方向", "p2": "上一个方向", "p3": "用户ID", "p4": "锁定状态"}]
["application_orientation", "Application requested orientation %d, got rotation %d which has compatible metrics", "应用方向请求", {"p1": "请求方向", "p2": "实际旋转"}]
["block_location", "shouldBlockLocation %s ret:%b", "是否阻塞位置", {"p1": "运行状态", "p2": "返回值"}]
["suspend_autohide", "suspendAutohide", "暂停自动隐藏", {}]
["intercept_key_before_queueing", "interceptKeyBeforeQueueing: key %d , result : %d", "拦截按键", {"p1": "按键代码", "p2": "结果"}]
["resume_suspended_autohide", "resumeSuspendedAutohide", "恢复暂停的自动隐藏", {}]
["state_clip_top_amount", "state.clipTopAmount:%d, i:%d", "状态顶部裁剪量", {"p1": "顶部裁剪量", "p2": "索引"}]
["on_expanding_started", "onExpandingStarted", "扩展开始", {}]
["on_tracking_started", "onTrackingStarted", "跟踪开始", {}]
["fling_to_height", "flingToHeight: vel=%f, expand=%b, target=%f, collapseSpeedUpFactor=%f, expandBecauseOfFalsing=%b", "滑动到高度", {"p1": "速度", "p2": "扩展标志", "p3": "目标高度", "p4": "加速因子", "p5": "扩展原因"}]
["on_tracking_stopped", "onTrackingStopped: %b", "跟踪停止", {"p1": "布尔值"}]
["on_expanding_finished", "onExpandingFinished", "扩展完成", {}]
["play_sound_effect", "playSoundEffect   effectType: %d", "播放声音效果", {"p1": "效果类型"}]
["get_recent_tasks", "getRecentTasks: num=%d,flags=%d,totalTasks=%d", "获取最近任务", {"p1": "数量", "p2": "标志", "p3": "总任务数"}]
["top_activity", "getRecentTasks: topActivity=%s", "顶层活动", {"p1": "顶层活动信息"}]
["is_music_active", "isMusicActive...", "音乐活跃检查", {}]
["set_wired_device_connection_state", "setWiredDeviceConnectionState  type: %d  state: %d", "设置有线设备连接状态", {"p1": "类型", "p2": "状态"}]
["clean_up_application_record", "cleanUpApplicationRecord -- %d", "清理应用记录", {"p1": "进程ID"}]
["set_speakerphone_on", "setSpeakerphoneOn on:%b", "设置扬声器开启", {"p1": "开启状态"}]
["screen_frozen", "Screen frozen for +%ds%sms due to Window{%s}", "屏幕冻结日志", {"duration_seconds": "冻结时长秒数", "duration_milliseconds": "冻结时长毫秒数", "window_info": "窗口信息"}]
["should_block_location", "shouldBlockLocation running ...", "地理位置权限检查日志", {}]
["releasing_suspend_blocker", "Releasing suspend blocker \"%s\".", "释放挂起阻塞器日志", {"blocker_name": "阻塞器名称"}]
["hbm_brightness", "HBM brightness%s =%d", "高亮度模式亮度设置日志", {"in_or_out": "输入/输出标识", "brightness_value": "亮度值"}]
["query_sound_effects_enabled", "querySoundEffectsEnabled...", "查询音效启用状态日志", {}]
["acquiring_suspend_blocker", "Acquiring suspend blocker \"%s\".", "获取挂起阻塞器日志", {"blocker_name": "阻塞器名称"}]
["bad_activity_token", "Bad activity token: %s", "无效的活动令牌日志", {"token_info": "令牌信息"}]
["class_cast_exception", "%s cannot be cast to %s", "类型转换异常日志", {"source_class": "源类名", "target_class": "目标类名"}]
["overlap_amount", "overlapAmount:%f, previousNotificationEnd:%f, newYTranslation:%f, location:%d, i:%d, getTopPadding:%f, getLocationOnScreen():%d", "通知重叠计算日志", {"overlap_amount": "重叠量", "previous_notification_end": "前一个通知结束位置", "new_y_translation": "新Y轴平移量", "location": "位置索引", "i": "计数器", "get_top_padding": "顶部填充", "get_location_on_screen": "屏幕位置"}]
["cancel_peek", "cancelPeek: %b", "取消预览日志", {"is_canceled": "是否取消"}]
["broadcast_sent", "Sending non-protected broadcast %s from system %d:%s/u0a%d pkg %s", "广播发送日志", {"broadcast_action": "广播动作", "uid": "用户ID", "package_name": "包名", "user_id": "用户标识"}]
["log_notification_visibility_changes", "logNotificationVisibilityChanges runInThread %s", "通知可见性变化日志", {"status": "线程运行状态"}]
["sim_pin_secure", "isSimPinSecure %s is null or empty", "SIM卡PIN安全性检查日志", {"sim_data_status": "SIM数据状态"}]
["register_callback_ui", "registerCallback not in UI.", "注册回调不在UI线程日志", {}]
["android_runtime_exception", "android.util.AndroidRuntimeException: %s", "Android运行时异常日志", {"exception_message": "异常信息"}]
["unregister_callback", "*** unregister callback for %s", "注销回调日志", {"callback_info": "回调信息"}]
["phone_intf_mgr_data_enabled", "[PhoneIntfMgr] getDataEnabled: subId=%d phoneId=%d", "电话接口管理器数据启用日志", {"sub_id": "订阅ID", "phone_id": "电话ID"}]
["motion_event_intercept", "onInterceptTouchEvent MotionEvent { action=%s, actionButton=%d, id[0]=%d, x[0]=%f, y[0]=%f, toolType[0]=%s, buttonState=%d, metaState=%d, flags=0x%x, edgeFlags=0x%x, pointerCount=%d, historySize=%d, eventTime=%d, downTime=%d, deviceId=%d, source=0x%x }, mBlockTouches=%b", "触摸事件拦截日志", {"action": "动作类型", "action_button": "动作按钮", "id_0": "触点ID", "x_0": "X坐标", "y_0": "Y坐标", "tool_type_0": "工具类型", "button_state": "按钮状态", "meta_state": "元状态", "flags": "标志位", "edge_flags": "边缘标志位", "pointer_count": "触点数量", "history_size": "历史大小", "event_time": "事件时间", "down_time": "按下时间", "device_id": "设备ID", "source": "来源", "block_touches": "是否阻止触摸"}]
["animate_collapse_panels", "animateCollapsePanels:flags=%d, force=%b, delayed=%b, mExpandedVisible=%b", "折叠面板动画日志", {"flags": "标志位", "force": "是否强制", "delayed": "是否延迟", "expanded_visible": "是否展开可见"}]
["start_activity", "START u%d {%s} from uid %d on display %d", "启动活动日志", {"user_id": "用户ID", "intent_info": "意图信息", "uid": "UID", "display_id": "显示ID"}]
["activity_record_info", "ActivityRecord info: %s, euid: %d", "活动记录信息日志", {"activity_info": "活动信息", "euid": "扩展用户ID"}]
["taking_screenshot", "Taking screenshot from Surface with crop:[Rect(%d, %d - %d, %d)], width:[%d], height:[%d], minLayer:[%d], maxLayer:[%d], inRotation:[%b], rot:[%d]", "截屏日志", {"crop_x1": "裁剪X1", "crop_y1": "裁剪Y1", "crop_x2": "裁剪X2", "crop_y2": "裁剪Y2", "width": "宽度", "height": "高度", "min_layer": "最小图层", "max_layer": "最大图层", "in_rotation": "是否旋转", "rotation": "旋转角度"}]
["enqueue_notification", "enqueueNotificationInternal: pkg=%s id=%d notification=%s", "通知入队日志", {"package_name": "包名", "notification_id": "通知ID", "notification_info": "通知信息"}]
["disable_features", "disable: < expand %s* alerts %s* back home recent clock navigationbar search quick_settings >", "禁用功能列表", {"p1": "未知参数1", "p2": "未知参数2"}]
["update_lights_locked", "updateLightsLocked,mInCall =%b,mScreenOn = %b,ledNotification == null?%b", "更新灯光锁定状态", {"mInCall": "是否在通话中", "mScreenOn": "屏幕是否开启", "ledNotification": "通知灯是否为空"}]
["cancel_notification", "cancelNotification,cancelNotificationLocked,callingUid = %d,callingPid = %d", "取消通知", {"callingUid": "调用者的用户ID", "callingPid": "调用者的进程ID"}]
["set_lights_on", "setLightsOn(%b)", "设置灯光状态", {"state": "灯光开启状态"}]
["skipping_intent", "Skipping, withExcluded: %b, tr.intent:%s", "跳过意图", {"withExcluded": "排除状态", "intent": "意图信息"}]
["is_bluetooth_a2dp_on", "isBluetoothA2dpOn...", "检查蓝牙A2DP是否开启", {}]
["is_bluetooth_sco_on", "isBluetoothScoOn...", "检查蓝牙SCO是否开启", {}]
["last_audible_stream_volume", "getLastAudibleStreamVolume  treamType: %d", "获取最后可听流的音量", {"streamType": "音频流类型"}]
["get_devices_for_stream", "getDevicesForStream  streamType: %d", "获取指定音频流的设备", {"streamType": "音频流类型"}]
["clean_up_application_record", "cleanUpApplicationRecordLocked, pid: %d, restart: %b", "清理应用程序记录", {"pid": "进程ID", "restart": "是否重启"}]
["stop_wifi_display_scan", "stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=%b", "停止Wi-Fi显示扫描", {"mWifiDisplayScanRequested": "Wi-Fi显示扫描请求状态"}]
["set_speakerphone_on", "setSpeakerphoneOn  on: %b", "设置扬声器状态", {"on": "扬声器开启状态"}]
["received_time_tick", "Received TIME_TICK alarm; rescheduling", "收到时间滴答报警", {}]
["schedule_time_tick_event", "scheduleTimeTickEvent triggerAtTime = %d", "调度时间滴答事件", {"triggerAtTime": "触发时间"}]
["handle_time_update", "handleTimeUpdate", "处理时间更新", {}]
["process_died", "Process %s (pid %d) has died", "进程已死亡", {"packageName": "包名", "pid": "进程ID"}]
["new_process", "new Process app=ProcessRecord{%s %d:%s/u0a%d}, name: %s, euid: %d", "新进程创建", {"recordId": "记录ID", "userId": "用户ID", "packageName": "包名", "euid": "有效用户ID", "name": "进程名"}]
["enqueue_notification_internal", "enqueueNotificationInternal: n.getKey = %s", "内部排队通知", {"key": "通知键"}]
["get_ringer_mode", "getRingerMode...", "获取铃声模式", {}]
["add_notification", "addNotification key=%s", "添加通知", {"key": "通知键"}]
["mark_notification_as_seen", "Marking notification as seen %s", "标记通知为已查看", {"key": "通知键"}]
["on_notification_expansion_changed", "onNotificationExpansionChanged called", "通知展开状态改变回调", {}]
["activity_check_resid", "ACTIVITY check resid: %s, size=%d", "活动检查资源ID", {"resid": "资源ID", "size": "大小"}]
["battery_changed", "ACTION_BATTERY_CHANGED AMP: %d; Volt: %d", "电池变化", {"AMP": "电流", "Volt": "电压"}]
["charging_speed", "ChargingSpeed  Wattage: %d ST: %d --> %d", "充电速度", {"Wattage": "瓦数", "ST_before": "开始充电状态", "ST_after": "结束充电状态"}]
["start_activity", "startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=%x cmp=%s (has extras) }", "启动活动", {"flags": "标志", "component": "组件"}]
["schedule_peek", "schedulePeek", "Schedule peek event", {}]
["get_ringtone_player", "getRingtonePlayer...", "Get ringtone player event", {}]
["update_lights_locked_off", "updateLightsLocked,turn off notificationLight", "Update lights locked, turn off notification light", {}]
["register_callback", "*** register callback for %s", "Register callback for component", {"component": "Component name"}]
["get_data_enabled", "[PhoneIntfMgr] getDataEnabled: subId=%d retVal=%b", "Get data enabled status", {"subId": "Subscription ID", "retVal": "Return value (boolean)"}]
["on_notification_click", "onNotificationClick called", "On notification click called", {}]
["cancel_notification_locked_app", "cancelNotificationLocked called,tell the app,reason = %d", "Cancel notification locked, tell the app with reason", {"reason": "Reason code"}]
["cancel_notification_locked", "cancelNotificationLocked:%s|%s|%d|%s|%d", "Cancel notification locked details", {"key1": "Key 1", "key2": "Key 2", "key3": "Key 3", "key4": "Key 4", "key5": "Key 5"}]
["cancel_notification_remove", "cancelNotificationLocked,remove =%s", "Cancel notification locked, remove package", {"package_name": "Package name"}]
["apply_options_locked", "applyOptionsLocked: Unknown animationType=%d", "Apply options locked with unknown animation type", {"animationType": "Animation type"}]
["update_notification_shade", "updateNotificationShade: total=%d, active=%d", "Update notification shade count", {"total": "Total notifications", "active": "Active notifications"}]
["make_expanded_invisible", "makeExpandedInvisible: mExpandedVisible=%b", "Make expanded invisible", {"mExpandedVisible": "Expanded visibility status"}]
["close_qs", "closeQs", "Close quick settings panel", {}]
["instant_collapse", "instantCollapse", "Instant collapse of quick settings", {}]
["start_dump", "Start dump, calling from : pid=%d, uid=%d", "Start dump with PID and UID", {"pid": "Process ID", "uid": "User ID"}]
["attach_application", "ActivityManagerService,attachApplication,callingPid = %d", "Attach application with calling PID", {"callingPid": "Calling process ID"}]
["clean_up_application_record", "cleanUpApplicationRecordLocked, reset pid: %d, euid: %d", "Clean up application record locked", {"pid": "Process ID", "euid": "Effective user ID"}]
["stop_wifi_display_scan", "stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=%d", "Stop Wi-Fi display scan locked", {"count": "Wi-Fi display scan request count"}]
["received_broadcast", "received broadcast %s", "Received broadcast intent", {"intent": "Broadcast intent"}]
["start_service_restart", "Scheduling restart of crashed service %s in %dms", "Scheduling restart of crashed service", {"service": "Service name", "delay": "Delay in milliseconds"}]
["start_proc", "Start proc %d:%s for %s", "Start process", {"pid": "Process ID", "process_name": "Process name", "reason": "Reason"}]
["getAllCellInfo_blocked", "getAllCellInfo is blocked by permission manager . callingPackage = %s", "Get all cell info blocked by permission manager", {"callingPackage": "Calling package"}]
["getCellLocation_blocked", "getCellLocation is blocked by permission manager uid:%d pid:%d", "Get cell location blocked by permission manager", {"uid": "User ID", "pid": "Process ID"}]
["set_data_source", "setDataSource(%d, %d, %d)", "Set data source", {"fd": "File descriptor", "offset": "Offset", "length": "Length"}]
["get_stream_volume", "getStreamVolume  treamType: %d", "Get stream volume", {"streamType": "Stream type"}]
["update_is_powered_locked", "updateIsPoweredLocked: wasPowered=%b, mIsPowered=%b, oldPlugType=%d, mPlugType=%d, mBatteryLevel=%d", "Update is powered locked", {"wasPowered": "Was powered", "mIsPowered": "Is powered", "oldPlugType": "Old plug type", "mPlugType": "Plug type", "mBatteryLevel": "Battery level"}]
["battery_changed", "battery changed pluggedType: %d", "Battery changed", {"pluggedType": "Plugged type"}]
["refresh_battery_info", "RefreshBatteryInfo isBatteryLow: %d", "Refresh battery info", {"isBatteryLow": "Is battery low"}]
["remove_notification", "removeNotification:%d|%s|%d|%s|%d", "Remove notification with ID, package name, and other details.", {"p1": "Notification ID", "p2": "Package name", "p3": "Unknown integer parameter", "p4": "Null or additional info", "p5": "UID"}]
["focus_layout_change", "The change in focus caused us to need to do a layout %s", "Focus change triggers layout updates.", {"p1": "Begin or End of layout process"}]
["remove_notification_children", "removeNotificationChildren", "Removing notification children.", {}]
["killing_process", "Killing %d:%s/%s (adj %d): empty for %ds", "Killing a process due to being idle.", {"p1": "Process ID", "p2": "Package name", "p3": "User identifier", "p4": "Adjustment value", "p5": "Idle time in seconds"}]
["unregister_audio_focus", "unregisterAudioFocusListener...", "Unregistering the audio focus listener.", {}]
["abandon_audio_focus", "abandonAudioFocus", "Abandoning audio focus.", {}]
["stay_awake", "[HSM] stayAwake %b uid: %d, pid: %d", "Stay awake state change for a specific UID and PID.", {"p1": "Stay awake status (true/false)", "p2": "User ID", "p3": "Process ID"}]
["media_player_destructor", "Pid:%d MediaPlayer destructor", "Media player destructor called for a specific PID.", {"p1": "Process ID"}]
["heads_up_existence_changed", "mHeadsUpExistenceChangedRunnable", "Heads-up existence changed runnable triggered.", {}]
["wired_headset_status", "isWiredHeadsetOn...", "Checking if wired headset is on.", {}]
["update_charging_status", "updateChargingLocked: charging=%b", "Update charging status locked.", {"p1": "Charging status (true/false)"}]
["battery_changed", "onReceive, action:android.intent.action.BATTERY_CHANGED", "Battery changed event received.", {}]
["plugged_type", "ACTION_BATTERY_CHANGED pluggedType: %d", "Battery plugged type changed.", {"p1": "Plugged type"}]
["ap_sta_disabled_state", "ApStaDisabledState what=%d", "AP station disabled state with specific what parameter.", {"p1": "What parameter"}]
["default_state", "DefaultState what=%d", "Default state with specific what parameter.", {"p1": "What parameter"}]
["handle_battery_update", "handleBatteryUpdate", "Handling battery update.", {}]
["set_display_mode", "MODE %d %d", "Mode change", {"last": "Last mode", "mode": "Current mode"}]
["panel_te", "TE", "屏幕TE信号", {}]
["dq_buffer", "DQ BUFFER %d", "dequeue buffer", {"id": "buffer id"}]
["q_buffer", "Q BUFFER %d", "enqueue buffer", {"id": "buffer id"}]
